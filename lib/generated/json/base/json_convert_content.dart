// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:kim/sdk/msg_store.dart';
import 'package:kim/generated/json/msg_store_helper.dart';
import 'package:kim/pkt/packet.dart';
import 'package:kim/generated/json/packet_helper.dart';

class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case Message:
        return messageFromJson(data as Message, json) as T;
      case LogicPkt:
        return logicPktFromJson(data as LogicPkt, json) as T;
    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
    switch (type) {
      case Message:
        return messageToJson(data as Message);
      case LogicPkt:
        return logicPktToJson(data as LogicPkt);
    }
    return data as T;
  }

  //Go back to a single instance by type
  static _fromJsonSingle<M>(json) {
    String type = M.toString();
    if (type == (Message).toString()) {
      return Message().fromJson(json);
    }
    if (type == (LogicPkt).toString()) {
      return LogicPkt().fromJson(json);
    }

    return null;
  }

  //list is returned by type
  static M _getListChildType<M>(List data) {
    if (<Message>[] is M) {
      return data.map<Message>((e) => Message().fromJson(e)).toList() as M;
    }
    if (<LogicPkt>[] is M) {
      return data.map<LogicPkt>((e) => LogicPkt().fromJson(e)).toList() as M;
    }

    throw Exception("not found");
  }

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}
